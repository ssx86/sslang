chunk ::= block

block ::= {stat} [retstat]

stat ::=  ';'| 
     varlist '=' explist | 
     functioncall | 
     label | 
     break | 
     goto Name | 
     do block end | 
     while exp do block end | 
     repeat block until exp | 
     if exp then block {elseif exp then block} [else block] end | 
     for Name '=' exp ',' exp [',' exp] do block end | 
     for namelist in explist do block end | 
     function funcname funcbody | 
     local function Name funcbody | 
     local namelist ['=' explist] 

retstat ::= return [explist] [';']

label ::= '::' Name '::'

funcname ::= Name {'.' Name} [':' Name]

varlist ::= var {',' var}

A -> Aa|b
:
A -> bA'
A'-> aA'|nil


var ::=  Name | prefixexp '[' exp ']' | prefixexp '.' Name 
prefixexp ::= var | functioncall | '(' exp ')'
functioncall ::=  prefixexp args | prefixexp ':' Name args 

/*
prefixexp ::= var | prefixexp args | prefixexp : Name args | ( exp ) 

//消除左递归prefixexp:
prefixexp ::= var `prefixexp  | ( exp ) `prefixexp
`prefixexp ::= args `prefixexp  | ':' Name args `prefixexp | ""

//带入var
var ::= Name | var `prefixexp [ exp ] | ( exp ) `prefixexp [ exp ] | var `prefixexp . Name | ( exp ) `prefixexp . Name


//消除左递归var
var ::= Name `var | ( exp ) `prefixexp [ exp ] `var | ( exp ) `prefixexp . Name `var
`var ::= `prefixexp [ exp ] `var | `prefixexp . Name `var | ""
prefixexp ::= var `prefixexp  | ( exp ) `prefixexp
`prefixexp ::= args `prefixexp  | ':' Name args `prefixexp | "" 
functioncall ::=  prefixexp args | prefixexp ':' Name args 

*/



exp ::=  nil | false | true | Numeral | LiteralString | '...' | functiondef | 
     prefixexp | tableconstructor | exp binop exp | unop exp 

namelist ::= Name {',' Name}

explist ::= exp {',' exp}

args ::=  '(' [explist] ')' | tableconstructor | LiteralString 

functiondef ::= function funcbody

funcbody ::= '(' [parlist] ')' block end

parlist ::= namelist [',' '...'] | '...'

tableconstructor ::= '{' [fieldlist] '}'

fieldlist ::= field {fieldsep field} [fieldsep]

field ::= '[' exp ']' '=' exp | Name '=' exp | exp

fieldsep ::= ',' | ';'

binop ::=  '+' | '-' | '*' | '/' | '//' | '^' | '%' | 
     '&' | '~' | '|' | '>>' | '<<' | '..' | 
     '<' | '<=' | '>' | '>=' | '==' | '~=' | 
     and | or

unop ::= '-' | not | '#' | '~'
